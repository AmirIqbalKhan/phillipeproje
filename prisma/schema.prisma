// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ORGANIZER
  ADMIN
  SUPPORT_STAFF
  EVENT_MODERATOR
  FINANCE_TEAM
  MARKETING_TEAM
  TECHNICAL_STAFF
}

enum EventStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  CANCELLED
  COMPLETED
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          Role     @default(USER)
  events        Event[]  @relation("OrganizerEvents")
  rsvps         RSVP[]
  messages      Message[]
  payments      Payment[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  referralCode  String?  @unique
  referredById  String?
  referredBy    User?    @relation("UserReferrals", fields: [referredById], references: [id])
  referredUsers User[]   @relation("UserReferrals")
  rewards       Reward[]
  sentFriendRequests     Friendship[] @relation("UserFriendships")
  receivedFriendRequests Friendship[] @relation("FriendUserFriendships")
  savedEvents   SavedEvent[]
  venues        Venue[]
  staff         Staff[]
  resources     Resource[]
  resetOtp        String?
  resetOtpExpires DateTime?
  sentSplitInvites SplitInvite[] @relation("SentSplitInvites")
  interests     String[] @default([])
  avatar        String?
  bio           String?
  isVerified    Boolean  @default(false)
  isSuspended   Boolean  @default(false)
  lastLoginAt   DateTime?
  lastLoginIp   String?
  loginHistory  LoginHistory[]
  followers     Follow[] @relation("UserFollowers")
  following     Follow[] @relation("UserFollowing")
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  eventReviews  EventReview[]
  eventPhotos   EventPhoto[]
  notifications Notification[]
  auditLogs     AuditLog[]
  employeeRole  EmployeeRole?
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  longDescription String
  date        DateTime
  location    String
  address     String
  price       Float    @default(0)
  capacity    Int      @default(100)
  category    String   @default("meetup")
  images      String[] @default([])
  tags        String[] @default([])
  agenda      Json
  speakers    Json
  isFeatured  Boolean  @default(false)
  status      EventStatus @default(DRAFT)
  organizer   User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId String
  organizerEmail String
  organizerPhone String
  organizerDescription String
  rsvps       RSVP[]
  messages    Message[]
  payments    Payment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  savedEvents SavedEvent[]
  venue       Venue?   @relation(fields: [venueId], references: [id])
  venueId     String?
  splitInvites SplitInvite[]
  reviews     EventReview[]
  photos      EventPhoto[]
  comments    Comment[]
  likes       Like[]
  posts       Post[]
  moderationHistory EventModerationHistory[]
  featuredHistory EventFeaturedHistory[]
}

model RSVP {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  status    RSVPStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?
  guests    Int      @default(1)
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
  NO_SHOW
}

model Message {
  id        String   @id @default(uuid())
  text      String
  userId    String
  eventId   String?
  user      User     @relation(fields: [userId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  recipientId String?
  messageType String  @default("TEXT") // TEXT, IMAGE, FILE
  attachmentUrl String?
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stripePaymentIntentId String?
  stripeSessionId String?
  refundAmount Float @default(0)
  refundReason String?
  refundedAt DateTime?
  commissionAmount Float @default(0)
  organizerPayoutAmount Float @default(0)
  organizerPayoutStatus String @default("PENDING") // PENDING, PROCESSED, FAILED
  organizerPayoutDate DateTime?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  DISPUTED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

model SavedEvent {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Friendship {
  id        String   @id @default(uuid())
  user      User     @relation("UserFriendships", fields: [userId], references: [id])
  userId    String
  friend    User     @relation("FriendUserFriendships", fields: [friendId], references: [id])
  friendId  String
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

model Follow {
  id        String   @id @default(uuid())
  follower  User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId String
  following User     @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String
  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Reward {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // e.g., 'referral', 'bonus', etc.
  amount    Float    // could be points, currency, etc.
  status    String   // e.g., 'pending', 'earned', 'redeemed'
  createdAt DateTime @default(now())
  redeemedAt DateTime?
}

model Venue {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  capacity  Int
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  description String?
  amenities String[]
  images    String[]
  isVerified Boolean @default(false)
}

model Staff {
  id          String   @id @default(uuid())
  name        String
  email       String
  role        String
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  permissions String[]
  isActive    Boolean  @default(true)
}

model Resource {
  id          String   @id @default(uuid())
  name        String
  type        String
  quantity    Int
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  cost        Float    @default(0)
  isAvailable Boolean  @default(true)
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  name      String
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  permissions String[]
  lastUsed  DateTime?
}

model Webhook {
  id        String   @id @default(uuid())
  url       String
  event     String
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastTriggered DateTime?
  failureCount Int @default(0)
}

model PlatformSetting {
  id        Int      @id @default(1)
  branding  String
  terms     String
  pricing   String
  commissionRate Float @default(0.10)
  currency  String  @default("USD")
  timezone  String  @default("UTC")
  emailTemplates Json
  featureFlags Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SplitInvite {
  id          String   @id @default(uuid())
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  inviter     User     @relation("SentSplitInvites", fields: [inviterId], references: [id])
  inviterId   String
  inviteeEmail String
  status      String   @default("PENDING") // PENDING, PAID, CANCELED
  stripeSessionId String?
  stripePaymentIntentId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New models for complete feature implementation

model EmployeeRole {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  role      String   // SUPPORT_STAFF, EVENT_MODERATOR, FINANCE_TEAM, MARKETING_TEAM, TECHNICAL_STAFF
  permissions String[]
  department String?
  supervisorId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoginHistory {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ipAddress String
  userAgent String
  location  String?
  success   Boolean
  createdAt DateTime @default(now())
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  images    String[]
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id])
  likes     Like[]
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublic  Boolean  @default(true)
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id])
  parentId  String?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  eventId   String?
  event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId, commentId, eventId])
}

model EventReview {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isVerified Boolean @default(false)
  isHidden  Boolean  @default(false)

  @@unique([userId, eventId])
}

model EventPhoto {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  url       String
  caption   String?
  createdAt DateTime @default(now())
  isApproved Boolean @default(true)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // FRIEND_REQUEST, EVENT_INVITE, RSVP_UPDATE, etc.
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

model EventModerationHistory {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  moderatorId String
  action    String   // APPROVE, REJECT, FEATURE, UNFEATURE
  reason    String?
  createdAt DateTime @default(now())
}

model EventFeaturedHistory {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  featuredBy String
  featuredAt DateTime @default(now())
  unfeaturedAt DateTime?
  reason    String?
}

model DiscountCode {
  id        String   @id @default(uuid())
  code      String   @unique
  discountType String // PERCENTAGE, FIXED_AMOUNT
  discountValue Float
  maxUses   Int?
  usedCount Int      @default(0)
  validFrom DateTime
  validUntil DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  createdBy String
  applicableEvents String[] // event IDs or "ALL"
}

model Report {
  id        String   @id @default(uuid())
  reporterId String
  reportedUserId String?
  reportedEventId String?
  reportedPostId String?
  reportedCommentId String?
  reason    String
  description String?
  status    String   @default("PENDING") // PENDING, INVESTIGATING, RESOLVED, DISMISSED
  moderatorId String?
  moderatorNotes String?
  createdAt DateTime @default(now())
  resolvedAt DateTime?
}
