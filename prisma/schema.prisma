// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  role          Role     @default(USER)
  events        Event[]  @relation("OrganizerEvents")
  rsvps         RSVP[]
  messages      Message[]
  payments      Payment[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  referralCode  String?  @unique
  referredById  String?
  referredBy    User?    @relation("UserReferrals", fields: [referredById], references: [id])
  referredUsers User[]   @relation("UserReferrals")
  rewards       Reward[]
  sentFriendRequests     Friendship[] @relation("UserFriendships")
  receivedFriendRequests Friendship[] @relation("FriendUserFriendships")
  savedEvents   SavedEvent[]
  venues        Venue[]
  staff         Staff[]
  resources     Resource[]
  resetOtp        String?
  resetOtpExpires DateTime?
}

model Event {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  location    String
  organizer   User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId String
  rsvps       RSVP[]
  messages    Message[]
  payments    Payment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  savedEvents SavedEvent[]
  venue       Venue?   @relation(fields: [venueId], references: [id])
  venueId     String?
}

model RSVP {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  status    RSVPStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Message {
  id        String   @id @default(uuid())
  text      String
  userId    String
  eventId   String?
  user      User     @relation(fields: [userId], references: [id])
  event     Event?   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

model SavedEvent {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Friendship {
  id        String   @id @default(uuid())
  user      User     @relation("UserFriendships", fields: [userId], references: [id])
  userId    String
  friend    User     @relation("FriendUserFriendships", fields: [friendId], references: [id])
  friendId  String
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

model Reward {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // e.g., 'referral', 'bonus', etc.
  amount    Float    // could be points, currency, etc.
  status    String   // e.g., 'pending', 'earned', 'redeemed'
  createdAt DateTime @default(now())
}

model Venue {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  capacity  Int
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id          String   @id @default(uuid())
  name        String
  email       String
  role        String
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resource {
  id          String   @id @default(uuid())
  name        String
  type        String
  quantity    Int
  organizer   User     @relation(fields: [organizerId], references: [id])
  organizerId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
